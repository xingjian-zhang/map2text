from typing import Any, Dict, List, Tuple

import vec2text
import numpy as np
import torch
import torch.nn as nn

from llm4explore.model.base import IdeaGenerator


class EmbeddingBasedFFNGenerator(IdeaGenerator):
    """Embedding-based idea generator.

    This generator uses a feed-forward network to map low-dimenional embeddings to
    high dimension, and generate new ideas based on that.

    Note: This generator requires the high-dimensional embeddings to be
    generated by text-embedding-ada-002 as it depends on vec2text for decoding.
    """

    def __init__(
        self,
        n_dims: int,
        data_old: List[str],
        low_dim_embeddings_old: np.ndarray,
        ffn_path: str,
        hidden_dim: int = 2048,
        dim_out: int = 1536,
        vec2text_kwargs: Dict[str, Any] = None,
    ):
        super().__init__(n_dims, data_old, low_dim_embeddings_old)
        vec2text_kwargs = vec2text_kwargs or {}

        self.ffn = nn.Sequential(
            nn.Linear(n_dims, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, dim_out),
        )

        self.ffn.load_state_dict(torch.load(ffn_path))
        self.vec2text_kwargs = vec2text_kwargs
        self.vec2text_corrector = vec2text.load_pretrained_corrector("text-embedding-ada-002")

    def decode(self, low_dim_embedding: np.ndarray) -> Tuple[str, Any]:
        high_dim_embedding = self.ffn(
            torch.tensor(low_dim_embedding,
                dtype=self.vec2text_corrector.model.dtype,
                device=self.vec2text_corrector.model.device,
            )
        )

        # Generate text from the interpolated high-dimensional embedding using vec2text.
        if high_dim_embedding.ndim == 1:
            high_dim_embedding = high_dim_embedding[None, :]
        return vec2text.invert_embeddings(
            torch.tensor(
                high_dim_embedding,
                dtype=self.vec2text_corrector.model.dtype,
                device=self.vec2text_corrector.model.device,
            ),
            self.vec2text_corrector,
            **self.vec2text_kwargs,
        )[0], []